package service

import (
	"api/util"
	"encoding/json"
	"gorm.io/gorm"
	"strconv"
	"time"
)

type MsgStruct struct {
	Count int                    `json:"count"`
	Res   []DslInfoRequestStruct `json:"res"`
}

type DslInfoRequestStruct struct {
	Id        int64          `gorm:"column:id" bson:"_id"`
	Name      string         `gorm:"column:name" bson:"name"`
	Path      string         `gorm:"column:path" bson:"path"`
	UserId    int64          `bson:"user_id"`
	APIId     int64          `bson:"api_id"`
	Content   string         `gorm:"column:content" bson:"content"`
	Method    string         `gorm:"column:method" bson:"method"`
	CreatedAt time.Time      `gorm:"created_at;<-:create" bson:"created_at"`
	UpdatedAt time.Time      `gorm:"updated_at;<-:update" bson:"updated_at"`
	Deleted   gorm.DeletedAt `gorm:"deleted" bson:"deleted"`
}

type RequestErrorMsgStruct struct {
	ErrorType string `json:"errorType"`
	ErrorMsg  string `json:"errorMsg"`
}

type RespRequeset struct {
	Code            int                   `json:"code"`
	Msg             MsgStruct             `json:"msg"`
	RequestErrorMsg RequestErrorMsgStruct `json:"requestErrorMsg"`
}

func GetList() (map[string]map[string]MetadataRequestStruct, bool) {
	query := make(map[string]string)
	header := make(map[string]string)
	var contentType string
	failed := false

	Method := "GET"
	//注意端口映射
	url := "http://100.100.30.74:32346/v1/inner/dsl/list"

	subResp, code := util.Do(Method, url, header, query, []byte{}, contentType)
	var subMap RespRequeset
	err := json.Unmarshal([]byte(subResp), &subMap)
	if code != 200 {
		failed = true
	}
	if err != nil {
		failed = true
	}
	request := make(map[string]map[string]MetadataRequestStruct)
	if subMap.Msg.Count == 0 {
		failed = true
	} else {
		for _, dsl := range subMap.Msg.Res {
			request, failed = parseRequest(dsl, request)
		}
	}
	return request, failed
}

func parseRequest(dsl DslInfoRequestStruct, m map[string]map[string]MetadataRequestStruct) (map[string]map[string]MetadataRequestStruct, bool) {
	//var metadata MetadataRequestStruct
	var auto AutoGenerated
	var dslJsonMap map[string]interface{}
	err := json.Unmarshal([]byte(dsl.Content), &dslJsonMap)
	if err != nil {
		return nil, true
	}
	bytes, err := json.Marshal(map[string]interface{}{"APIs": dslJsonMap["APIs"]})
	if err != nil {
		return nil, true
	}

	err = json.Unmarshal(bytes, &auto)
	if err != nil {
		return nil, true
	}

	method, ok := m[dsl.Name]
	if !ok {
		method = make(map[string]MetadataRequestStruct)
	}
	var apiSlice ApiSlice
	for _, api := range auto.APIs {
		a := ApiStruct{
			Services:  ServicesStruct{Host: api.Services.Host, Port: strconv.Itoa(api.Services.Port)},
			Path:      api.Path,
			Protocol:  api.Protocol,
			Method:    api.Method,
			Parameter: api.Parameter,
			//header 漏了
			Headers:    nil,
			BatchIndex: api.BatchIndex,

			ParentApi: nil,
			Name:      api.Name,
		}
		apiSlice = append(apiSlice, a)
	}
	method[dsl.Method] = MetadataRequestStruct{APIs: apiSlice}
	m[dsl.Name] = method
	return m, false
}
